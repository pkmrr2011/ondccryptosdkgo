// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package registry contains request/response schema for ONDC registration flow.
//
// [ONDC-Registry-Onboarding v2.0.5] is a OpenAPI specification reference of schemas in this package.
//
// [ONDC-Registry-Onboarding v2.0.5]: https://app.swaggerhub.com/apis/ONDC/ONDC-Registry-Onboarding/2.0.5
package registry

import (
	"encoding/json"
	"time"
)

// SubscribeRequest - Request payload of /subscribe API
type SubscribeRequest struct {
	Context *SubscribeContext `json:"context" validate:"required"`
	Message *SubscribeMessage `json:"message" validate:"required"`
}

// SubscribeContext - A context of /subscribe request
type SubscribeContext struct {
	Operation *Context `json:"operation,omitempty"`
}

// SubscribeMessage - A message of /subscribe request
type SubscribeMessage struct {
	// A unique request id generated by a network participant to track each request.
	RequestID string `json:"request_id,omitempty"`

	// Time of request generation in RFC3339 format
	Timestamp CustomTime `json:"timestamp,omitempty"`

	Entity *Entity `json:"entity,omitempty"`

	NetworkParticipant []NetworkParticipant `json:"network_participant,omitempty"`
}

// SubscribeResponse - Response payload of /subscribe API
type SubscribeResponse struct {
	Message *SubscribeResponseMessage `json:"message" validate:"required"`
	Error   *Error                    `json:"error,omitempty"`
}

// SubscribeResponseMessage - Inner message of SubscribeResponse
type SubscribeResponseMessage struct {
	Ack *Ack `json:"ack" validate:"required"`
}

// OnSubscribeRequest - Request payload of /on_subscribe API
type OnSubscribeRequest struct {
	// A unique ID describing a subscriber on a network.
	SubscriberID string `json:"subscriber_id,omitempty"`

	// String encrypted using the subscriberâ€™s old encryption public key
	Challenge string `json:"challenge,omitempty"`
}

// OnSubscribeResponse - Response payload of /on_subscribe API
type OnSubscribeResponse struct {
	// Decrypted value
	Answer string `json:"answer,omitempty"`
}

// LookupRequest - Request payload of /lookup API
type LookupRequest struct {
	// A unique ID describing a subscriber on a network.
	SubscriberID *string `json:"subscriber_id,omitempty" validate:"required"`

	// Country code as per ISO 3166-1 and ISO 3166-2 format
	Country *string `json:"country,omitempty" validate:"required"`

	// A unique ID describing a subscriber on a network.
	UkID string `json:"ukId,omitempty"`

	// City code
	City *string `json:"city,omitempty" validate:"required"`

	// Industry domain of the subscriber.
	Domain *string `json:"domain,omitempty" validate:"required"`

	// BAP or BPP
	Type *string `json:"type,omitempty"` // TODO: validate this field if needed
}

// LookupResponse - Response payload of /lookup API
type LookupResponse []LookupResponseInner

// LookupResponseInner - Inner payload in the array of LookupResponse
type LookupResponseInner struct {
	// A unique ID describing a subscriber on a network.
	SubscriberID string `json:"subscriber_id,omitempty"`

	// UUID.
	UkID string `json:"ukId,omitempty"`

	// UUID.
	//
	// We need to use `any` instead of `string` because the registry return this field as int in the staging environment.
	// In the other environment (pre-prod and prod) return this field as UUID string.
	// This is a work-a-round so that we can unmarshall the response from the staging registry without an error.
	// We do not use this field for anything. It should be fine to use `any`
	BrID any `json:"br_id,omitempty"`

	// Country code
	Country string `json:"country,omitempty"`

	// City code
	City string `json:"city,omitempty"`

	// Industry domain of the subscriber.
	Domain string `json:"domain,omitempty"`

	// Signing Public Key
	SigningPublicKey string `json:"signing_public_key,omitempty"`

	// Encryption Public Key
	EncrPublicKey string `json:"encr_public_key,omitempty"`

	// Keys valid from
	ValidFrom string `json:"valid_from,omitempty"`

	// Keys valid until
	ValidUntil string `json:"valid_until,omitempty"`

	// Created timestamp
	Created string `json:"created,omitempty"`

	// Updated timestamp
	Updated string `json:"updated,omitempty"`
}

// VLookupRequest - Request payload of /vlookup API
type VLookupRequest struct {
	// A unique ID describing a subscriber on a network.
	SenderSubscriberID *string `json:"sender_subscriber_id" validate:"required"`

	// Country code as per ISO 3166-1 and ISO 3166-2 format
	RequestID *string `json:"request_id" validate:"required"`

	// request timestamp to avoid replay attack
	Timestamp *time.Time `json:"timestamp" validate:"required"`

	SearchParameters *VLookupSearchParameters `json:"search_parameters" validate:"required"`

	// signature
	Signature *string `json:"signature" validate:"required"`
}

// VLookupResponse - Response payload of /vlookup API
type VLookupResponse []VLookupResponseInner

// VLookupResponseInner - Inner payload in the array of VLookupResponse
type VLookupResponseInner struct {
	// A unique ID describing a subscriber on a network.
	SubscriberID string `json:"subscriber_id,omitempty"`

	// Country code
	Country string `json:"country,omitempty"`

	// City code
	City string `json:"city,omitempty"`

	// Signing Public Key
	SigningPublicKey string `json:"signing_public_key,omitempty"`

	// Encryption Public Key
	EncrPublicKey string `json:"encr_public_key,omitempty"`

	// Keys valid from
	ValidFrom string `json:"valid_from,omitempty"`

	// Keys valid until
	ValidUntil string `json:"valid_until,omitempty"`

	// Created timestamp
	Created string `json:"created,omitempty"`

	// Updated timestamp
	Updated string `json:"updated,omitempty"`

	// Unique key of subscriber
	UniqueKeyID string `json:"unique_key_id,omitempty"`

	NetworkParticipant []VLookupNetworkParticipant `json:"network_participant,omitempty"`
}

// Ack - Describes the ACK response
type Ack struct {
	// Describe the status of the ACK response. If schema validation passes, status is ACK else it is NACK
	Status string `json:"status" validate:"required,oneof=ACK NACK"`
}

// Context - Describes the Context response
type Context struct {
	// 1 - Buyer New entity registration
	// 2 - Non-MSN Seller New entity registration
	// 3 - MSN Seller New entity registration
	// 4 - Buyer and Non-MSN Seller new registration
	// 5 - Buyer and MSN Seller new registration
	// 6 - Buyer/Non-MSN/MSN SellerApp key rotation
	// 7 - MSN Seller changing keys for Seller on Record
	// 8 - Buyer adding New network participant for Non-MSN Seller
	// 9 - Buyer adding New network participant for MSN Seller
	// 10 - MSN Seller adding new seller on record
	// 11 - BuyerApp/SellerApp amending city
	// 12 - MSN Seller amending Seller on record city
	OpsNo int32 `json:"ops_no,omitempty" validate:"min=1,max=12"`
}

// Entity - Describes the Entity response
type Entity struct {
	GST *EntityGst `json:"gst,omitempty"`

	PAN *EntityPAN `json:"pan,omitempty"`

	NameOfAuthorisedSignatory string `json:"name_of_authorised_signatory,omitempty"`

	AddressOfAuthorisedSignatory string `json:"address_of_authorised_signatory,omitempty"`

	EmailID string `json:"email_id,omitempty"`

	MobileNo string `json:"mobile_no,omitempty"`

	// Country code as per ISO 3166-1 and ISO 3166-2 format
	Country string `json:"country,omitempty"`

	SubscriberID string `json:"subscriber_id,omitempty"`

	// it should be relative to subscriber_id mentioned domain. In below example with subscriber _id as abc.com, regsitry will call https://abc.com/ondc/onboarding/on_subscribe
	CallbackURL string `json:"callback_url,omitempty"`

	KeyPair *KeyPair `json:"key_pair,omitempty"`
}

// EntityGst - Describes the EntityGst
type EntityGst struct {
	LegalEntityName string   `json:"legal_entity_name,omitempty"`
	BusinessAddress string   `json:"business_address,omitempty"`
	CityCode        []string `json:"city_code,omitempty"`
	GSTNo           string   `json:"gst_no,omitempty"`
}

// EntityPAN - Describes an EntityPan object
type EntityPAN struct {
	// This shall be used to match the name as per PAN with Income Tax Department
	NameAsPerPAN string `json:"name_as_per_pan,omitempty"`

	// Permanent Account Number issued by Income Tax Department. First five alphabets followed by four numeric followed by one alphabet
	PANNo string `json:"pan_no,omitempty"`

	// DD/MM/YYYY format
	DateOfIncorporation string `json:"date_of_incorporation,omitempty"`
}

// Error - Describes an error object
type Error struct {
	Type string `json:"type" validate:"required,oneof=CONTEXT-ERROR CORE-ERROR DOMAIN-ERROR POLICY-ERROR JSON-SCHEMA-ERROR"`

	// ONDC specific error code. For full list of error codes, refer to docs/drafts/Error Codes.md of this repo
	Code *string `json:"code" validate:"required"`

	// Path to json schema generating the error. Used only during json schema validation errors
	Path string `json:"path,omitempty"`

	// Human readable message describing the error
	Message string `json:"message,omitempty"`
}

// KeyPair - Describes an KeyPair
type KeyPair struct {
	SigningPublicKey string `json:"signing_public_key,omitempty"`

	EncryptionPublicKey string `json:"encryption_public_key,omitempty"`

	// use IST time zone
	ValidFrom CustomTime `json:"valid_from,omitempty"`

	// use IST time zone
	ValidUntil CustomTime `json:"valid_until,omitempty"`
}

// NetworkParticipant - Describes an NetworkParticipant
type NetworkParticipant struct {
	SubscriberURL string `json:"subscriber_url,omitempty"`

	// Industry domain of the subscriber
	Domain string `json:"domain,omitempty"`

	Type *string `json:"type,omitempty" validate:"omitempty,oneof=buyerApp sellerApp gateway"`

	MSN string `json:"msn,omitempty"`

	CityCode []string `json:"city_code,omitempty"`

	SellerOnRecord []SellerOnRecord `json:"seller_on_record,omitempty"`
}

// SellerOnRecord - Describes a SellerOnRecord
type SellerOnRecord struct {
	UniqueKeyID string   `json:"unique_key_id,omitempty"`
	KeyPair     KeyPair  `json:"key_pair,omitempty"`
	CityCode    []string `json:"city_code,omitempty"`
}

// VLookupKeyPair - Describes a VlookupKeyPair
type VLookupKeyPair struct {
	// Signing Public Key
	SigningPublicKey string `json:"signing_public_key,omitempty"`

	// Encryption Public Key
	EncrPublicKey string `json:"encr_public_key,omitempty"`

	// Keys valid from
	ValidFrom string `json:"valid_from,omitempty"`

	// Keys valid until
	ValidUntil string `json:"valid_until,omitempty"`
}

// VLookupNetworkParticipant - Describes a VlookupNetworkParticipant
type VLookupNetworkParticipant struct {
	// URL to be verified and configured for network participation.The given URL should have a valid SSL Certificate that should be able to pass OCSP check. https://certificatetools.com/ocsp-checker can be used to check prior to submitting the request.
	SubscriberURL string `json:"subscriber_url,omitempty"`

	// Industry domain of the subscriber.
	Domain string `json:"domain,omitempty"`

	// buyerApp or sellerApp
	Type string `json:"type,omitempty"`

	// true or false
	Msn bool `json:"msn,omitempty"`

	// City code
	CityCode string `json:"city_code,omitempty"`

	SellerOnRecord []VLookupSellerOnRecord `json:"seller_on_record,omitempty"`
}

// VLookupSearchParameters - Describes a VlookupSearchParameters
type VLookupSearchParameters struct {
	// Country code
	Country string `json:"country,omitempty"`

	// Industry domain of the subscriber.
	Domain string `json:"domain,omitempty"`

	// buyerApp or sellerApp.
	Type string `json:"type,omitempty"`

	// City code.
	City string `json:"city,omitempty"`

	// subscriber id.
	SubscriberID string `json:"subscriber_id,omitempty"`
}

// VLookupSellerOnRecord - Describes a VlookupSellerOnRecord
type VLookupSellerOnRecord struct {
	// UUID
	UniqueKeyID string `json:"unique_key_id,omitempty"`

	// City code
	CityCode string `json:"city_code,omitempty"`

	KeyPair VLookupKeyPair `json:"key_pair,omitempty"`
}

// CustomTime - time.Time with a custom marshalJSON method
type CustomTime time.Time

func (ct *CustomTime) UnmarshalJSON(b []byte) (err error) {
	var t time.Time
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}
	*ct = CustomTime(t)
	return nil
}

func (ct CustomTime) MarshalJSON() ([]byte, error) {
	result := time.Time(ct).Format("2006-01-02T15:04:05.000Z07:00")
	return json.Marshal(result)
}
